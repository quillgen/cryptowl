// Mocks generated by Mockito 5.4.6 from annotations
// in cryptowl/test/repositories/category_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:typed_data' as _i11;

import 'package:cryptowl/src/config/sqlite.dart' as _i13;
import 'package:kdbx/src/credentials/credentials.dart' as _i5;
import 'package:kdbx/src/kdbx_file.dart' as _i9;
import 'package:kdbx/src/kdbx_format.dart' as _i3;
import 'package:kdbx/src/kdbx_group.dart' as _i7;
import 'package:kdbx/src/kdbx_header.dart' as _i4;
import 'package:kdbx/src/kdbx_object.dart' as _i10;
import 'package:kdbx/src/utils/sequence.dart' as _i12;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:riverpod/src/internals.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeProviderContainer_0 extends _i1.SmartFake
    implements _i2.ProviderContainer {
  _FakeProviderContainer_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeKeepAliveLink_1 extends _i1.SmartFake implements _i2.KeepAliveLink {
  _FakeKeepAliveLink_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProviderSubscription_2<State1> extends _i1.SmartFake
    implements _i2.ProviderSubscription<State1> {
  _FakeProviderSubscription_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeKdbxFormat_3 extends _i1.SmartFake implements _i3.KdbxFormat {
  _FakeKdbxFormat_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeKdbxReadWriteContext_4 extends _i1.SmartFake
    implements _i3.KdbxReadWriteContext {
  _FakeKdbxReadWriteContext_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeKdbxHeader_5 extends _i1.SmartFake implements _i4.KdbxHeader {
  _FakeKdbxHeader_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeKdbxBody_6 extends _i1.SmartFake implements _i3.KdbxBody {
  _FakeKdbxBody_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCredentials_7 extends _i1.SmartFake implements _i5.Credentials {
  _FakeCredentials_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_8<T1> extends _i1.SmartFake implements _i6.Future<T1> {
  _FakeFuture_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeKdbxGroup_9 extends _i1.SmartFake implements _i7.KdbxGroup {
  _FakeKdbxGroup_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMergeContext_10 extends _i1.SmartFake implements _i3.MergeContext {
  _FakeMergeContext_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Ref].
///
/// See the documentation for Mockito's code generation for more information.
class MockRef<State extends Object?> extends _i1.Mock
    implements _i2.Ref<State> {
  MockRef() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProviderContainer get container => (super.noSuchMethod(
        Invocation.getter(#container),
        returnValue: _FakeProviderContainer_0(
          this,
          Invocation.getter(#container),
        ),
      ) as _i2.ProviderContainer);

  @override
  T refresh<T>(_i2.Refreshable<T>? provider) => (super.noSuchMethod(
        Invocation.method(
          #refresh,
          [provider],
        ),
        returnValue: _i8.dummyValue<T>(
          this,
          Invocation.method(
            #refresh,
            [provider],
          ),
        ),
      ) as T);

  @override
  void invalidate(_i2.ProviderOrFamily? provider) => super.noSuchMethod(
        Invocation.method(
          #invalidate,
          [provider],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void listenSelf(
    void Function(
      State?,
      State,
    )? listener, {
    void Function(
      Object,
      StackTrace,
    )? onError,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #listenSelf,
          [listener],
          {#onError: onError},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void invalidateSelf() => super.noSuchMethod(
        Invocation.method(
          #invalidateSelf,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onAddListener(void Function()? cb) => super.noSuchMethod(
        Invocation.method(
          #onAddListener,
          [cb],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onRemoveListener(void Function()? cb) => super.noSuchMethod(
        Invocation.method(
          #onRemoveListener,
          [cb],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onResume(void Function()? cb) => super.noSuchMethod(
        Invocation.method(
          #onResume,
          [cb],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onCancel(void Function()? cb) => super.noSuchMethod(
        Invocation.method(
          #onCancel,
          [cb],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onDispose(void Function()? cb) => super.noSuchMethod(
        Invocation.method(
          #onDispose,
          [cb],
        ),
        returnValueForMissingStub: null,
      );

  @override
  T read<T>(_i2.ProviderListenable<T>? provider) => (super.noSuchMethod(
        Invocation.method(
          #read,
          [provider],
        ),
        returnValue: _i8.dummyValue<T>(
          this,
          Invocation.method(
            #read,
            [provider],
          ),
        ),
      ) as T);

  @override
  bool exists(_i2.ProviderBase<Object?>? provider) => (super.noSuchMethod(
        Invocation.method(
          #exists,
          [provider],
        ),
        returnValue: false,
      ) as bool);

  @override
  T watch<T>(_i2.ProviderListenable<T>? provider) => (super.noSuchMethod(
        Invocation.method(
          #watch,
          [provider],
        ),
        returnValue: _i8.dummyValue<T>(
          this,
          Invocation.method(
            #watch,
            [provider],
          ),
        ),
      ) as T);

  @override
  _i2.KeepAliveLink keepAlive() => (super.noSuchMethod(
        Invocation.method(
          #keepAlive,
          [],
        ),
        returnValue: _FakeKeepAliveLink_1(
          this,
          Invocation.method(
            #keepAlive,
            [],
          ),
        ),
      ) as _i2.KeepAliveLink);

  @override
  _i2.ProviderSubscription<T> listen<T>(
    _i2.ProviderListenable<T>? provider,
    void Function(
      T?,
      T,
    )? listener, {
    void Function(
      Object,
      StackTrace,
    )? onError,
    bool? fireImmediately,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listen,
          [
            provider,
            listener,
          ],
          {
            #onError: onError,
            #fireImmediately: fireImmediately,
          },
        ),
        returnValue: _FakeProviderSubscription_2<T>(
          this,
          Invocation.method(
            #listen,
            [
              provider,
              listener,
            ],
            {
              #onError: onError,
              #fireImmediately: fireImmediately,
            },
          ),
        ),
      ) as _i2.ProviderSubscription<T>);
}

/// A class which mocks [KdbxFile].
///
/// See the documentation for Mockito's code generation for more information.
class MockKdbxFile extends _i1.Mock implements _i9.KdbxFile {
  MockKdbxFile() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.KdbxFormat get kdbxFormat => (super.noSuchMethod(
        Invocation.getter(#kdbxFormat),
        returnValue: _FakeKdbxFormat_3(
          this,
          Invocation.getter(#kdbxFormat),
        ),
      ) as _i3.KdbxFormat);

  @override
  _i3.KdbxReadWriteContext get ctx => (super.noSuchMethod(
        Invocation.getter(#ctx),
        returnValue: _FakeKdbxReadWriteContext_4(
          this,
          Invocation.getter(#ctx),
        ),
      ) as _i3.KdbxReadWriteContext);

  @override
  _i4.KdbxHeader get header => (super.noSuchMethod(
        Invocation.getter(#header),
        returnValue: _FakeKdbxHeader_5(
          this,
          Invocation.getter(#header),
        ),
      ) as _i4.KdbxHeader);

  @override
  _i3.KdbxBody get body => (super.noSuchMethod(
        Invocation.getter(#body),
        returnValue: _FakeKdbxBody_6(
          this,
          Invocation.getter(#body),
        ),
      ) as _i3.KdbxBody);

  @override
  Set<_i10.KdbxObject> get dirtyObjects => (super.noSuchMethod(
        Invocation.getter(#dirtyObjects),
        returnValue: <_i10.KdbxObject>{},
      ) as Set<_i10.KdbxObject>);

  @override
  _i5.Credentials get credentials => (super.noSuchMethod(
        Invocation.getter(#credentials),
        returnValue: _FakeCredentials_7(
          this,
          Invocation.getter(#credentials),
        ),
      ) as _i5.Credentials);

  @override
  bool get isDirty => (super.noSuchMethod(
        Invocation.getter(#isDirty),
        returnValue: false,
      ) as bool);

  @override
  _i6.Stream<Set<_i10.KdbxObject>> get dirtyObjectsChanged =>
      (super.noSuchMethod(
        Invocation.getter(#dirtyObjectsChanged),
        returnValue: _i6.Stream<Set<_i10.KdbxObject>>.empty(),
      ) as _i6.Stream<Set<_i10.KdbxObject>>);

  @override
  set credentials(_i5.Credentials? credentials) => super.noSuchMethod(
        Invocation.setter(
          #credentials,
          credentials,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<_i11.Uint8List> save() => (super.noSuchMethod(
        Invocation.method(
          #save,
          [],
        ),
        returnValue: _i6.Future<_i11.Uint8List>.value(_i11.Uint8List(0)),
      ) as _i6.Future<_i11.Uint8List>);

  @override
  _i6.Future<T> saveTo<T>(_i9.FileSaveCallback<T>? saveBytes) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveTo,
          [saveBytes],
        ),
        returnValue: _i8.ifNotNull(
              _i8.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #saveTo,
                  [saveBytes],
                ),
              ),
              (T v) => _i6.Future<T>.value(v),
            ) ??
            _FakeFuture_8<T>(
              this,
              Invocation.method(
                #saveTo,
                [saveBytes],
              ),
            ),
      ) as _i6.Future<T>);

  @override
  void onSaved(_i12.TimeSequence? savedAt) => super.noSuchMethod(
        Invocation.method(
          #onSaved,
          [savedAt],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dirtyObject(_i10.KdbxObject? kdbxObject) => super.noSuchMethod(
        Invocation.method(
          #dirtyObject,
          [kdbxObject],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.KdbxGroup getRecycleBinOrCreate() => (super.noSuchMethod(
        Invocation.method(
          #getRecycleBinOrCreate,
          [],
        ),
        returnValue: _FakeKdbxGroup_9(
          this,
          Invocation.method(
            #getRecycleBinOrCreate,
            [],
          ),
        ),
      ) as _i7.KdbxGroup);

  @override
  void upgrade(int? majorVersion) => super.noSuchMethod(
        Invocation.method(
          #upgrade,
          [majorVersion],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.MergeContext merge(_i9.KdbxFile? other) => (super.noSuchMethod(
        Invocation.method(
          #merge,
          [other],
        ),
        returnValue: _FakeMergeContext_10(
          this,
          Invocation.method(
            #merge,
            [other],
          ),
        ),
      ) as _i3.MergeContext);
}

/// A class which mocks [SqliteConfig].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockSqliteConfig extends _i1.Mock implements _i13.SqliteConfig {
  MockSqliteConfig() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get version => (super.noSuchMethod(
        Invocation.getter(#version),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#version),
        ),
      ) as String);

  @override
  String get instance => (super.noSuchMethod(
        Invocation.getter(#instance),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#instance),
        ),
      ) as String);

  @override
  String get kdfParameters => (super.noSuchMethod(
        Invocation.getter(#kdfParameters),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#kdfParameters),
        ),
      ) as String);
}
