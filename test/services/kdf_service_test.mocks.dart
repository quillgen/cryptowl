// Mocks generated by Mockito 5.4.6 from annotations
// in cryptowl/test/services/kdf_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:typed_data' as _i10;

import 'package:cryptowl/src/config/app_config.dart' as _i6;
import 'package:cryptowl/src/crypto/aead_crypto.dart' as _i11;
import 'package:cryptowl/src/crypto/hmac.dart' as _i4;
import 'package:cryptowl/src/crypto/protected_value.dart' as _i9;
import 'package:cryptowl/src/service/config_service.dart' as _i7;
import 'package:cryptowl/src/service/version_service.dart' as _i5;
import 'package:flutter_secure_storage/flutter_secure_storage.dart' as _i3;
import 'package:logging/logging.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i12;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLogger_0 extends _i1.SmartFake implements _i2.Logger {
  _FakeLogger_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFlutterSecureStorage_1 extends _i1.SmartFake
    implements _i3.FlutterSecureStorage {
  _FakeFlutterSecureStorage_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCryptoHmac_2 extends _i1.SmartFake implements _i4.CryptoHmac {
  _FakeCryptoHmac_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeVersionService_3 extends _i1.SmartFake
    implements _i5.VersionService {
  _FakeVersionService_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAppConfig_4 extends _i1.SmartFake implements _i6.AppConfig {
  _FakeAppConfig_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ConfigService].
///
/// See the documentation for Mockito's code generation for more information.
class MockConfigService extends _i1.Mock implements _i7.ConfigService {
  @override
  _i2.Logger get logger => (super.noSuchMethod(
        Invocation.getter(#logger),
        returnValue: _FakeLogger_0(
          this,
          Invocation.getter(#logger),
        ),
        returnValueForMissingStub: _FakeLogger_0(
          this,
          Invocation.getter(#logger),
        ),
      ) as _i2.Logger);

  @override
  _i3.FlutterSecureStorage get secureStore => (super.noSuchMethod(
        Invocation.getter(#secureStore),
        returnValue: _FakeFlutterSecureStorage_1(
          this,
          Invocation.getter(#secureStore),
        ),
        returnValueForMissingStub: _FakeFlutterSecureStorage_1(
          this,
          Invocation.getter(#secureStore),
        ),
      ) as _i3.FlutterSecureStorage);

  @override
  _i4.CryptoHmac get hmac => (super.noSuchMethod(
        Invocation.getter(#hmac),
        returnValue: _FakeCryptoHmac_2(
          this,
          Invocation.getter(#hmac),
        ),
        returnValueForMissingStub: _FakeCryptoHmac_2(
          this,
          Invocation.getter(#hmac),
        ),
      ) as _i4.CryptoHmac);

  @override
  _i5.VersionService get versionService => (super.noSuchMethod(
        Invocation.getter(#versionService),
        returnValue: _FakeVersionService_3(
          this,
          Invocation.getter(#versionService),
        ),
        returnValueForMissingStub: _FakeVersionService_3(
          this,
          Invocation.getter(#versionService),
        ),
      ) as _i5.VersionService);

  @override
  _i8.Future<_i6.AppConfig> loadConfig(String? content) => (super.noSuchMethod(
        Invocation.method(
          #loadConfig,
          [content],
        ),
        returnValue: _i8.Future<_i6.AppConfig>.value(_FakeAppConfig_4(
          this,
          Invocation.method(
            #loadConfig,
            [content],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i6.AppConfig>.value(_FakeAppConfig_4(
          this,
          Invocation.method(
            #loadConfig,
            [content],
          ),
        )),
      ) as _i8.Future<_i6.AppConfig>);

  @override
  _i8.Future<bool> verifyConfig(
    _i6.AppConfig? config,
    _i9.ProtectedValue? macKey,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #verifyConfig,
          [
            config,
            macKey,
          ],
        ),
        returnValue: _i8.Future<bool>.value(false),
        returnValueForMissingStub: _i8.Future<bool>.value(false),
      ) as _i8.Future<bool>);

  @override
  _i8.Future<_i6.AppConfig> createConfig(
    String? instanceId,
    _i10.Uint8List? transformSeed,
    _i10.Uint8List? masterSeed,
    _i11.AuthEncryptedResult? protectedSymmetricKey,
    _i9.ProtectedValue? macKey,
    _i10.Uint8List? nonce,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createConfig,
          [
            instanceId,
            transformSeed,
            masterSeed,
            protectedSymmetricKey,
            macKey,
            nonce,
          ],
        ),
        returnValue: _i8.Future<_i6.AppConfig>.value(_FakeAppConfig_4(
          this,
          Invocation.method(
            #createConfig,
            [
              instanceId,
              transformSeed,
              masterSeed,
              protectedSymmetricKey,
              macKey,
              nonce,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i6.AppConfig>.value(_FakeAppConfig_4(
          this,
          Invocation.method(
            #createConfig,
            [
              instanceId,
              transformSeed,
              masterSeed,
              protectedSymmetricKey,
              macKey,
              nonce,
            ],
          ),
        )),
      ) as _i8.Future<_i6.AppConfig>);

  @override
  _i8.Future<String> saveConfig(_i6.AppConfig? config) => (super.noSuchMethod(
        Invocation.method(
          #saveConfig,
          [config],
        ),
        returnValue: _i8.Future<String>.value(_i12.dummyValue<String>(
          this,
          Invocation.method(
            #saveConfig,
            [config],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<String>.value(_i12.dummyValue<String>(
          this,
          Invocation.method(
            #saveConfig,
            [config],
          ),
        )),
      ) as _i8.Future<String>);

  @override
  _i8.Future<_i9.ProtectedValue?> readSecureStore(String? key) =>
      (super.noSuchMethod(
        Invocation.method(
          #readSecureStore,
          [key],
        ),
        returnValue: _i8.Future<_i9.ProtectedValue?>.value(),
        returnValueForMissingStub: _i8.Future<_i9.ProtectedValue?>.value(),
      ) as _i8.Future<_i9.ProtectedValue?>);

  @override
  _i8.Future<void> saveSecureStore(
    String? key,
    _i9.ProtectedValue? data,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveSecureStore,
          [
            key,
            data,
          ],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  _i8.Future<_i10.Uint8List> generateEmergencyKit(String? secretKey) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateEmergencyKit,
          [secretKey],
        ),
        returnValue: _i8.Future<_i10.Uint8List>.value(_i10.Uint8List(0)),
        returnValueForMissingStub:
            _i8.Future<_i10.Uint8List>.value(_i10.Uint8List(0)),
      ) as _i8.Future<_i10.Uint8List>);
}

/// A class which mocks [VersionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockVersionService extends _i1.Mock implements _i5.VersionService {
  @override
  _i8.Future<String> getPackageVersion() => (super.noSuchMethod(
        Invocation.method(
          #getPackageVersion,
          [],
        ),
        returnValue: _i8.Future<String>.value(_i12.dummyValue<String>(
          this,
          Invocation.method(
            #getPackageVersion,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<String>.value(_i12.dummyValue<String>(
          this,
          Invocation.method(
            #getPackageVersion,
            [],
          ),
        )),
      ) as _i8.Future<String>);
}
